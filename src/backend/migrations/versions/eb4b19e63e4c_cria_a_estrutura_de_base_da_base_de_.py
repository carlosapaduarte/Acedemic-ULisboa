import sqlmodel

"""Cria a estrutura de base da base de dados

Revision ID: eb4b19e63e4c
Revises: 
Create Date: 2025-10-21 12:23:39.758298

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'eb4b19e63e4c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('leagues',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('rank', sa.Integer(), nullable=False),
    sa.Column('badge_icon_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('promotion_criteria_json', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('rewards_json', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('rank')
    )
    op.create_index(op.f('ix_leagues_code'), 'leagues', ['code'], unique=True)
    op.create_table('tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name_pt', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name_en', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('color', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tags_name_en'), 'tags', ['name_en'], unique=False)
    op.create_index(op.f('ix_tags_name_pt'), 'tags', ['name_pt'], unique=False)
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('avatar_filename', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('share_progress', sa.Boolean(), nullable=True),
    sa.Column('receive_st_app_notifications', sa.Boolean(), nullable=True),
    sa.Column('study_session_time', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('badges',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('icon_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('app_scope', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('criteria_json', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('display_order', sa.Integer(), nullable=True),
    sa.Column('league_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['league_id'], ['leagues.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_badges_code'), 'badges', ['code'], unique=True)
    op.create_index(op.f('ix_badges_display_order'), 'badges', ['display_order'], unique=False)
    op.create_table('batch',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id', 'user_id')
    )
    op.create_table('daily_energy_status',
    sa.Column('date_', sa.Date(), nullable=False),
    sa.Column('time_of_day', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('date_', 'user_id')
    )
    op.create_table('daily_tag',
    sa.Column('date_', sa.Date(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('date_', 'tag_id')
    )
    op.create_table('st_app_use_model',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id', 'user_id')
    )
    op.create_table('st_archive',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('name', 'user_id')
    )
    op.create_table('st_curricular_unit',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('name', 'user_id')
    )
    op.create_table('st_event',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('every_week', sa.Boolean(), nullable=False),
    sa.Column('every_day', sa.Boolean(), nullable=False),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('color', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id', 'user_id')
    )
    op.create_table('st_schedule_block_not_available',
    sa.Column('week_day', sa.Integer(), nullable=False),
    sa.Column('start_hour', sa.Integer(), nullable=False),
    sa.Column('duration', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('week_day', 'start_hour', 'duration', 'user_id')
    )
    op.create_table('st_task',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('deadline', sa.DateTime(), nullable=True),
    sa.Column('priority', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('parent_task_id', sa.Integer(), nullable=True),
    sa.Column('parent_user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['parent_task_id', 'parent_user_id'], ['st_task.id', 'st_task.user_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id', 'user_id')
    )
    op.create_table('st_week_day_planning',
    sa.Column('week_planning_day', sa.Integer(), nullable=True),
    sa.Column('hour', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('user_leagues',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('league_id', sa.Integer(), nullable=False),
    sa.Column('joined_at', sa.DateTime(), nullable=False),
    sa.Column('current_level_progress', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['league_id'], ['leagues.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'league_id'),
    sa.UniqueConstraint('user_id', 'league_id', name='_user_league_uc')
    )
    op.create_table('user_metrics',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('login_streak', sa.Integer(), nullable=False),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('completed_challenges', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('completed_challenges_count', sa.Integer(), nullable=False),
    sa.Column('current_challenge_level', sa.Integer(), nullable=True),
    sa.Column('challenge_completion_streak', sa.Integer(), nullable=False),
    sa.Column('last_challenge_completion_date', sa.Date(), nullable=True),
    sa.Column('challenges_completed_in_current_level', sa.Integer(), nullable=False),
    sa.Column('study_sessions_completed', sa.Integer(), nullable=False),
    sa.Column('total_points', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('user_tag_link',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('is_custom', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'tag_id')
    )
    op.create_table('week_study_time',
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('week', sa.Integer(), nullable=False),
    sa.Column('total', sa.Integer(), nullable=False),
    sa.Column('average_by_session', sa.Float(), nullable=False),
    sa.Column('n_of_sessions', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('year', 'week', 'user_id')
    )
    op.create_table('batch_day',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['batch_id', 'user_id'], ['batch.id', 'batch.user_id'], ),
    sa.PrimaryKeyConstraint('id', 'batch_id', 'user_id')
    )
    op.create_table('st_event_tag',
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['event_id', 'user_id'], ['st_event.id', 'st_event.user_id'], name='fk_st_event_tag_event_composite'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('tag_id', 'event_id'),
    sa.UniqueConstraint('event_id', 'tag_id', name='uq_st_event_tag')
    )
    op.create_table('st_file',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('text', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('archive_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['archive_name', 'user_id'], ['st_archive.name', 'st_archive.user_id'], ),
    sa.PrimaryKeyConstraint('name', 'archive_name', 'user_id')
    )
    op.create_table('st_grade',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('curricular_unit_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['curricular_unit_name', 'user_id'], ['st_curricular_unit.name', 'st_curricular_unit.user_id'], ),
    sa.PrimaryKeyConstraint('id', 'curricular_unit_name', 'user_id')
    )
    op.create_table('st_task_tag',
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.ForeignKeyConstraint(['task_id', 'user_id'], ['st_task.id', 'st_task.user_id'], name='fk_st_task_tag_task_composite'),
    sa.PrimaryKeyConstraint('tag_id', 'task_id'),
    sa.UniqueConstraint('task_id', 'tag_id', name='uq_st_task_tag')
    )
    op.create_table('user_badges',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('badge_id', sa.Integer(), nullable=False),
    sa.Column('awarded_at', sa.DateTime(), nullable=False),
    sa.Column('metadata_json', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['badge_id'], ['badges.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'badge_id'),
    sa.UniqueConstraint('user_id', 'badge_id', name='_user_badge_uc')
    )
    op.create_table('challenge',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch_day_id', sa.Integer(), nullable=False),
    sa.Column('batch_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('completion_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['batch_day_id', 'batch_id', 'user_id'], ['batch_day.id', 'batch_day.batch_id', 'batch_day.user_id'], ),
    sa.PrimaryKeyConstraint('id', 'batch_day_id', 'batch_id', 'user_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('challenge')
    op.drop_table('user_badges')
    op.drop_table('st_task_tag')
    op.drop_table('st_grade')
    op.drop_table('st_file')
    op.drop_table('st_event_tag')
    op.drop_table('batch_day')
    op.drop_table('week_study_time')
    op.drop_table('user_tag_link')
    op.drop_table('user_metrics')
    op.drop_table('user_leagues')
    op.drop_table('st_week_day_planning')
    op.drop_table('st_task')
    op.drop_table('st_schedule_block_not_available')
    op.drop_table('st_event')
    op.drop_table('st_curricular_unit')
    op.drop_table('st_archive')
    op.drop_table('st_app_use_model')
    op.drop_table('daily_tag')
    op.drop_table('daily_energy_status')
    op.drop_table('batch')
    op.drop_index(op.f('ix_badges_display_order'), table_name='badges')
    op.drop_index(op.f('ix_badges_code'), table_name='badges')
    op.drop_table('badges')
    op.drop_table('user')
    op.drop_index(op.f('ix_tags_name_pt'), table_name='tags')
    op.drop_index(op.f('ix_tags_name_en'), table_name='tags')
    op.drop_table('tags')
    op.drop_index(op.f('ix_leagues_code'), table_name='leagues')
    op.drop_table('leagues')
    # ### end Alembic commands ###
