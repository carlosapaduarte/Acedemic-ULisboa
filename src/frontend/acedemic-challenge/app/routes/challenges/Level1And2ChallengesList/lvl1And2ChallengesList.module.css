@import "../challengesList.module.css";


.challengeBoxContainer {
    width: 100%;
    height: 100%;

    --expandableContainerMaxHeight: 260px;

    display: flex;
    align-items: flex-start;

    overflow: hidden;
}

.challengeBox {
    width: 100%;

    background-color: var(--color-2);

    --edge-size: .5rem;
    clip-path: polygon(
            var(--edge-size) 0,
            calc(100% - var(--edge-size)) 0,
            100% var(--edge-size),
            100% calc(100% - var(--edge-size)),
            calc(100% - var(--edge-size)) 100%,
            var(--edge-size) 100%,
            0 calc(100% - var(--edge-size)),
            0 var(--edge-size)
    );

    font-weight: bold;

    display: flex;
    flex-direction: column;

    &.loading {
        --loadingColor: #1e001e;

        background: linear-gradient(90deg,
        var(--loadingColor) 25%,
        #471e47 50%,
        var(--loadingColor) 75%);
        background-size: 400px 100%;
        animation: loadingAnimation 2s infinite linear;
        color: white;
    }

    &.expanded {
        background-color: var(--color-4);
    }

    &.locked {
        background-color: var(--color-3);
        color: white;
    }
}

@keyframes loadingAnimation {
    0% {
        background-position: -200px 0;
    }
    100% {
        background-position: 200px 0;
    }
}

.challengeBoxButton {
    width: 100%;

    padding: 0.5rem 0.5rem 0.5rem 1rem;

    text-transform: uppercase;
    font-family: 'Chakra Petch', sans-serif;
    color: inherit;

    background-color: var(--color-3);

    &:hover {
        background-color: var(--color-3-hover);
    }
    &:active {
        transform: translate(1px, -1px);
        box-shadow: 6px 6px 6px rgba(0, 0, 0, 0.2) inset,
        -6px -6px 6px rgba(0, 0, 0, 0.2) inset;
    }

    &.reached {
        background-color: var(--color-2);

        &:hover {
            background-color: var(--color-2-hover);
        }
    }

    &.expanded {
        background-color: var(--color-4);

        &:hover {
            background-color: var(--color-4-hover);
        }
    }

    &:focus-visible {
        outline: 5px solid black;
        outline-offset: -5px;
    }
}

.challengeBox.loading .challengeBoxButton {
    background-color: inherit;
}

.challengeContainer {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: flex-start;
}

.challengeLockedTagContainer {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.25rem;
}

.challengeLockedLockIcon {
    margin-top: -3px;
}

.challengeLockedTag {
    padding: 0.25rem;

    background-color: transparent;

    outline: 2px solid white;
    outline-offset: -2px;

    color: white;
    font-weight: bold;
    font-size: 1rem;
    text-transform: uppercase;
    text-wrap: nowrap;
}

@keyframes locked-shake {
    0% {
        transform: translate(0, 0);
    }
    20% {
        transform: translate(-2px, 1px);
    }
    40% {
        transform: translate(2px, -1px);
    }
    60% {
        transform: translate(-2px, -1px);
    }
    80% {
        transform: translate(2px, 1px);
    }
    100% {
        transform: translate(0, 0);
    }
}

.shakeAnimation {
    animation: locked-shake 0.3s cubic-bezier(.36, .07, .19, .97);
}

.challengeExpandableContainer {
    transition: max-height 0.5s cubic-bezier(0.87, 0, 0.13, 1);
    height: 1000vh;
    max-height: 0;
    overflow: auto;

    box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.2) inset;
}

.challengeBox.expanded .challengeExpandableContainer {
    max-height: var(--expandableContainerMaxHeight);
}

.challengeExpandableContainerContent {
    padding: 0.5rem 0.5rem 0.5rem 1rem;

    height: 100%;
    overflow: hidden;

    display: flex;
    flex-direction: column;
}

.challengeNotes {
    flex-shrink: 0;
    margin-top: auto;

    text-align: left;

    color: black;
    font-weight: bold;
    font-size: 1rem;
    font-family: var(--font-family1), sans-serif;
    text-transform: none;
    text-wrap: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;

    &.empty {
        opacity: 0.85;
    }
}


@media (min-width: 580px) {
    :root {
        --title-height: clamp(1rem, 2.7vw, 1.25rem);
    }

    .challengeBox .challengeTitle {
        font-size: var(--title-height);
    }

    /***** Solution with expanded challenge staying at one column *****/
    .challengeBoxContainer {
        --boxContainerMaxHeight: calc(
                var(--expandableContainerMaxHeight) +
                var(--title-height) + 8px + 8px + 6px + 29px
        );
    }

    .challengeBoxContainer.expanded + .challengeBoxContainer:nth-child(2n).lastExpanded,
    .challengeBoxContainer.lastExpanded:has(+ .challengeBoxContainer:nth-child(2n).expanded) {
        height: var(--boxContainerMaxHeight);
    }

    /***** Solution with expanded challenge spanning multiple columns *****/
    /*.challengeBoxContainer.expanded {
        grid-column: span 2;
    }

    .challengeBoxContainer:nth-child(2n + 1).expanded + .challengeBoxContainer {
        grid-column: 2;
    }*/
}

@media (min-width: 1030px) {
    /***** Solution with expanded challenge staying at one column *****/
    .challengeBoxContainer.expanded + .challengeBoxContainer:nth-child(2n).lastExpanded,
    .challengeBoxContainer.lastExpanded:has(+ .challengeBoxContainer:nth-child(2n).expanded) {
        height: auto;
    }

    .challengeBoxContainer.expanded + .challengeBoxContainer:nth-child(3n-1).lastExpanded,
    .challengeBoxContainer.expanded + .challengeBoxContainer:nth-child(3n).lastExpanded,
    .challengeBoxContainer.lastExpanded:has(+ .challengeBoxContainer:nth-child(3n-1).expanded),
    .challengeBoxContainer.lastExpanded:has(+ .challengeBoxContainer:nth-child(3n).expanded),
    .challengeBoxContainer.expanded + .challengeBoxContainer:nth-child(3n-1) + .challengeBoxContainer:nth-child(3n).lastExpanded,
    .challengeBoxContainer.lastExpanded:has(+ .challengeBoxContainer:nth-child(3n-1) + .challengeBoxContainer:nth-child(3n).expanded) {
        height: var(--boxContainerMaxHeight);
    }

    .challengeBoxContainer.expanded + .challengeBoxContainer:nth-child(3n-1) + .challengeBoxContainer:nth-child(3n).lastExpanded,
    .challengeBoxContainer.lastExpanded:has(+ .challengeBoxContainer:nth-child(3n-1) + .challengeBoxContainer:nth-child(3n).expanded) {
        height: var(--boxContainerMaxHeight);
    }

    /***** Solution with expanded challenge spanning multiple columns *****/
    /*.challengeBoxContainer.expanded {
        grid-column: span 3;
    }

    .challengeBoxContainer:nth-child(3n + 2).expanded + .challengeBoxContainer {
        grid-column: 3;
    }

    .challengeBoxContainer:nth-child(3n + 1).expanded + .challengeBoxContainer {
        grid-column: 2;
    }

    .challengeBoxContainer:nth-child(3n).expanded + .challengeBoxContainer {
        grid-column: 1;
    }*/
}