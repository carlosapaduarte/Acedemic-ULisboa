/*
Doesn't work, use SCSS
:root {
    --2colbreakpoint: 560px;
    --3colbreakpoint: 1024px;
}*/

.challengesPage {
    width: 100%;
    height: 100%;

    display: flex;
    flex-direction: column;
}

.mainContent {
    width: 100%;
    height: 100%;

    display: flex;
    flex-direction: column;
    overflow: auto;
}

@keyframes fade {
    0% {
        opacity: 0;
    }

    100% {
        opacity: 1;
    }
}

.challengesListContainer {
    margin-top: 1rem;
    margin-bottom: 1rem;
    padding-right: 1rem;
    padding-left: 1rem;

    overflow: auto;
}

.challengesList {
    display: grid;
    align-items: start;
    align-content: start;

    gap: 0.5rem;

    animation: fade 300ms cubic-bezier(0.87, 0, 0.13, 1);

    overflow: hidden;
}

.challengeBoxContainer {
    width: 100%;
    height: 100%;

    --expandableContainerMaxHeight: 260px;

    display: flex;
    align-items: flex-start;

    overflow: hidden;
}

.challengeBox {
    width: 100%;

    background-color: var(--secondary-color);

    --edge-size: .5rem;
    clip-path: polygon(
            var(--edge-size) 0,
            calc(100% - var(--edge-size)) 0,
            100% var(--edge-size),
            100% calc(100% - var(--edge-size)),
            calc(100% - var(--edge-size)) 100%,
            var(--edge-size) 100%,
            0 calc(100% - var(--edge-size)),
            0 var(--edge-size)
    );

    font-weight: bold;

    display: flex;
    flex-direction: column;
}

@keyframes loadingAnimation {
    0% {
        background-position: -200px 0;
    }
    100% {
        background-position: 200px 0;
    }
}

.challengeBox.loading {
    --loadingColor: #1e001e;

    background: linear-gradient(90deg,
    var(--loadingColor) 25%,
    #471e47 50%,
    var(--loadingColor) 75%);
    background-size: 400px 100%;
    animation: loadingAnimation 2s infinite linear;
    color: white;
}

.challengeBox.expanded {
    background-color: var(--fourth-color);
}

.challengeBox.locked {
    background-color: var(--third-color);
    color: white;
}

.challengeBox .challengeBoxButton {
    width: 100%;

    padding: 0.5rem 0.5rem 0.5rem 1rem;

    background-color: inherit;
    text-transform: uppercase;
    font-family: 'Chakra Petch', sans-serif;
    color: inherit;

    &:focus-visible {
        outline: 5px solid black;
        outline-offset: -5px;
    }
}

.challengeBox .challengeContainer {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: flex-start;
}

.challengeBox .challengeTitle {
    font-size: clamp(1rem, 5vw, 1.25rem);

    margin-right: 0.5rem;

    text-wrap: nowrap;
    text-align: left;
    text-overflow: ellipsis;

    overflow: hidden;
}

.buttonsContainer {
    padding-right: 1rem;
    margin-top: 0.5rem;

    min-height: 50px;
    width: 100%;

    display: flex;
    flex-direction: row;
    justify-content: space-between;
    gap: 0.5rem;
}

.addNoteButton {
    background-color: var(--secondary-color);
    font-weight: bold;
    font-size: 1rem;
    flex-basis: 40%;
}

.completeChallengeButton {
    height: auto;
    flex-basis: 60%;

    background-color: black;
    color: white;

    font-weight: bold;
    font-size: 1rem;
}

.challengeCompleteTag {
    background-color: black;
    color: white;
    font-weight: bold;
    font-size: 1rem;
    padding: 0.25rem;
    text-transform: uppercase;
    text-wrap: nowrap;
}

.challengeIncompleteTag {
    padding: 0.25rem;

    background-color: transparent;

    outline: 2px solid black;
    outline-offset: -2px;

    color: black;
    font-weight: bold;
    font-size: 1rem;
    text-transform: uppercase;
    text-wrap: nowrap;

    opacity: 0.6;
}

.challengeLockedTag {
    padding: 0.25rem;

    background-color: transparent;

    outline: 2px solid white;
    outline-offset: -2px;

    color: white;
    font-weight: bold;
    font-size: 1rem;
    text-transform: uppercase;
    text-wrap: nowrap;
}

@keyframes locked-shake {
    0% {
        transform: translate(0, 0);
    }
    20% {
        transform: translate(-2px, 1px);
    }
    40% {
        transform: translate(2px, -1px);
    }
    60% {
        transform: translate(-2px, -1px);
    }
    80% {
        transform: translate(2px, 1px);
    }
    100% {
        transform: translate(0, 0);
    }
}

.shakeAnimation {
    animation: locked-shake 0.3s cubic-bezier(.36, .07, .19, .97);
}

.challengeBox .challengeExpandableContainer {
    transition: max-height 0.5s cubic-bezier(0.87, 0, 0.13, 1);
    height: 1000vh;
    max-height: 0;
    overflow: auto;
}

.challengeBox.expanded .challengeExpandableContainer {
    max-height: var(--expandableContainerMaxHeight);
}

.challengeBox .challengeExpandableContainerContent {
    padding: 0.5rem 0.5rem 0.5rem 1rem;

    height: 100%;
    overflow: hidden;

    display: flex;
    flex-direction: column;
}

.challengeDescription {
    margin-bottom: 0.5rem;

    text-align: left;

    font-size: 1rem;
    font-family: var(--font-family1), sans-serif;
    text-transform: none;
    font-weight: normal;
    color: black;

    overflow: auto;
}

.challengeNotes {
    flex-shrink: 0;
    margin-top: auto;

    text-align: left;

    color: black;
    font-weight: bold;
    font-size: 1rem;
    font-family: var(--font-family1), sans-serif;
    text-transform: none;
    text-wrap: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;

    &.empty {
        opacity: 0.85;
    }
}


@media (min-width: 580px) {
    :root {
        --title-height: clamp(1rem, 2.7vw, 1.25rem);
    }

    .challengesList {
        grid-template-columns: repeat(2, 1fr);
    }

    .challengeBox .challengeTitle {
        font-size: var(--title-height);
    }

    /***** Solution with expanded challenge staying at one column *****/
    .challengeBoxContainer {
        --boxContainerMaxHeight: calc(
                var(--expandableContainerMaxHeight) +
                var(--title-height) + 8px + 8px + 6px + 29px
        );
    }

    .challengeBoxContainer.expanded + .challengeBoxContainer:nth-child(2n).lastExpanded,
    .challengeBoxContainer.lastExpanded:has(+ .challengeBoxContainer:nth-child(2n).expanded) {
        height: var(--boxContainerMaxHeight);
    }

    /***** Solution with expanded challenge spanning multiple columns *****/
    /*.challengeBoxContainer.expanded {
        grid-column: span 2;
    }

    .challengeBoxContainer:nth-child(2n + 1).expanded + .challengeBoxContainer {
        grid-column: 2;
    }*/
}

@media (min-width: 1030px) {
    .challengesList {
        grid-template-columns: repeat(3, 1fr);
    }

    /***** Solution with expanded challenge staying at one column *****/
    .challengeBoxContainer.expanded + .challengeBoxContainer:nth-child(2n).lastExpanded,
    .challengeBoxContainer.lastExpanded:has(+ .challengeBoxContainer:nth-child(2n).expanded) {
        height: auto;
    }

    .challengeBoxContainer.expanded + .challengeBoxContainer:nth-child(3n-1).lastExpanded,
    .challengeBoxContainer.expanded + .challengeBoxContainer:nth-child(3n).lastExpanded,
    .challengeBoxContainer.lastExpanded:has(+ .challengeBoxContainer:nth-child(3n-1).expanded),
    .challengeBoxContainer.lastExpanded:has(+ .challengeBoxContainer:nth-child(3n).expanded),
    .challengeBoxContainer.expanded + .challengeBoxContainer:nth-child(3n-1) + .challengeBoxContainer:nth-child(3n).lastExpanded,
    .challengeBoxContainer.lastExpanded:has(+ .challengeBoxContainer:nth-child(3n-1) + .challengeBoxContainer:nth-child(3n).expanded) {
        height: var(--boxContainerMaxHeight);
    }

    .challengeBoxContainer.expanded + .challengeBoxContainer:nth-child(3n-1) + .challengeBoxContainer:nth-child(3n).lastExpanded,
    .challengeBoxContainer.lastExpanded:has(+ .challengeBoxContainer:nth-child(3n-1) + .challengeBoxContainer:nth-child(3n).expanded) {
        height: var(--boxContainerMaxHeight);
    }

    /***** Solution with expanded challenge spanning multiple columns *****/
    /*.challengeBoxContainer.expanded {
        grid-column: span 3;
    }

    .challengeBoxContainer:nth-child(3n + 2).expanded + .challengeBoxContainer {
        grid-column: 3;
    }

    .challengeBoxContainer:nth-child(3n + 1).expanded + .challengeBoxContainer {
        grid-column: 2;
    }

    .challengeBoxContainer:nth-child(3n).expanded + .challengeBoxContainer {
        grid-column: 1;
    }*/
}